{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","useWikiSearchEngine","e","preventDefault","setState","wikiSearchReturnValues","pointerToThis","url","params","action","list","srsearch","state","WikiSearchTerms","format","Object","keys","forEach","key","fetch","then","response","json","query","search","push","queryResultPageFullURL","queryResultPageID","pageid","queryResultPageTitle","title","queryResultPageSnippet","snippet","queryResultPageWordCount","wordcount","page","key2","pageID","urlForRetrievingPageURLByPageID","pages","fullurl","forceUpdate","changeWikiSearchTerms","target","value","wikiSearchTerms","console","log","this","wikiSearchResults","key3","className","href","dangerouslySetInnerHTML","__html","type","onChange","placeholder","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAoHeA,G,kBAhHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,oBAAsB,SAACC,GACrBA,EAAEC,iBAEF,EAAKC,SAAS,CACZC,uBAAwB,KAG1B,IAAMC,EAAa,eAEfC,EAAM,qCAENC,EAAS,CACTC,OAAQ,QACRC,KAAM,SACNC,SAAU,EAAKC,MAAMC,gBACrBC,OAAQ,QAGZP,GAAY,YACZQ,OAAOC,KAAKR,GAAQS,SAAQ,SAACC,GAC3BX,GAAO,IAAMW,EAAM,IAAMV,EAAOU,MAGlCC,MAAMZ,GACHa,MACC,SAAUC,GACR,OAAOA,EAASC,UAGnBF,MACC,SAAUC,GAGR,IAAK,IAAIH,KAAOG,EAASE,MAAMC,OAC7BlB,EAAcM,MAAMP,uBAAuBoB,KAAK,CAC9CC,uBAAwB,cACxBC,kBAAmBN,EAASE,MAAMC,OAAON,GAAKU,OAC9CC,qBAAsBR,EAASE,MAAMC,OAAON,GAAKY,MACjDC,uBAAwBV,EAASE,MAAMC,OAAON,GAAKc,QACnDC,yBAA0BZ,EAASE,MAAMC,OAAON,GAAKgB,eAK5Dd,MACC,SAAUC,GAAW,IAAD,aAEhB,IAAIc,EAAO7B,EAAcM,MAAMP,uBAAuB+B,GAClDC,EAAS/B,EAAcM,MAAMP,uBAAuB+B,GAAMT,kBAC1DW,EAA+B,qFAAiFD,EAAjF,2BAEnClB,MAAMmB,GACHlB,MACC,SAAUC,GACR,OAAOA,EAASC,UAGnBF,MACC,SAAUC,GACRc,EAAKT,uBAAyBL,EAASE,MAAMgB,MAAMF,GAAQG,QAE3DlC,EAAcmC,kBAftB,IAAK,IAAIL,KAAQ9B,EAAcM,MAAMP,uBAAyB,QAtDnD,EA+EnBqC,sBAAwB,SAACxC,GACvB,EAAKE,SAAS,CACZS,gBAAiBX,EAAEyC,OAAOC,SA/E5B,EAAKhC,MAAQ,CACXP,uBAAwB,GACxBwC,gBAAiB,IAJF,E,sEAsFjBC,QAAQC,IAAIC,KAAKpC,MAAMP,wBACvB,IAAI4C,EAAoB,GAExB,IAAK,IAAIC,KAAQF,KAAKpC,MAAMP,uBAC1B4C,EAAkBxB,KAChB,yBAAK0B,UAAU,kBAAkBjC,IAAKgC,GACpC,4BAAI,uBAAGE,KAAMJ,KAAKpC,MAAMP,uBAAuB6C,GAAMxB,wBAAyBsB,KAAKpC,MAAMP,uBAAuB6C,GAAMrB,uBACtH,0BAAMsB,UAAU,QAAO,uBAAGC,KAAMJ,KAAKpC,MAAMP,uBAAuB6C,GAAMxB,wBAAyBsB,KAAKpC,MAAMP,uBAAuB6C,GAAMxB,yBACzI,uBAAGyB,UAAU,cAAcE,wBAAyB,CAACC,OAAQN,KAAKpC,MAAMP,uBAAuB6C,GAAMnB,4BAK3G,OACE,yBAAKoB,UAAU,OACb,uDACA,0BAAM1C,OAAO,IACX,2BAAO8C,KAAK,OAAOX,MAAOI,KAAKpC,MAAMC,iBAAmB,GAAI2C,SAAUR,KAAKN,sBAAuBe,YAAY,8BAC9G,4BAAQF,KAAK,SAASG,QAASV,KAAK/C,qBAApC,WAEDgD,O,GA3GSU,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,MAAK,SAAAqD,GACjCA,EAAaC,iB","file":"static/js/main.9555ed95.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wikiSearchReturnValues: [],\n      wikiSearchTerms: ''\n    }\n  }\n\n  useWikiSearchEngine = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      wikiSearchReturnValues: []\n    })\n\n    const pointerToThis = this;\n\n    var url = \"https://en.wikipedia.org/w/api.php\"; \n\n    var params = {\n        action: \"query\",\n        list: \"search\",\n        srsearch: this.state.WikiSearchTerms,\n        format: \"json\"\n    };\n\n    url = url + \"?origin=*\";\n    Object.keys(params).forEach((key) => {\n      url += \"&\" + key + \"=\" + params[key];\n    });\n\n    fetch(url)\n      .then(\n        function (response) {\n          return response.json();\n        }\n      )\n      .then(\n        function (response) {\n          // console.log(response);\n\n          for (var key in response.query.search) {\n            pointerToThis.state.wikiSearchReturnValues.push({\n              queryResultPageFullURL: 'hello world',\n              queryResultPageID: response.query.search[key].pageid,\n              queryResultPageTitle: response.query.search[key].title,\n              queryResultPageSnippet: response.query.search[key].snippet,\n              queryResultPageWordCount: response.query.search[key].wordcount\n            });\n          }\n        }\n      )\n      .then(\n        function (response) {\n          for (var key2 in pointerToThis.state.wikiSearchReturnValues) {\n            let page = pointerToThis.state.wikiSearchReturnValues[key2];\n            let pageID = pointerToThis.state.wikiSearchReturnValues[key2].queryResultPageID;\n            let urlForRetrievingPageURLByPageID = `https://en.wikipedia.org/w/api.php?origin=*&action=query&prop=info&pageids=${pageID}&inprop=url&format=json`;\n\n            fetch(urlForRetrievingPageURLByPageID)\n              .then(\n                function (response) {\n                  return response.json();\n                }\n              )\n              .then(\n                function (response) {\n                  page.queryResultPageFullURL = response.query.pages[pageID].fullurl;\n\n                  pointerToThis.forceUpdate();\n                }\n              )\n\n              // pointerToThis.forceUpdate();\n          }\n        }\n      )\n  }\n\n  changeWikiSearchTerms = (e) => {\n    this.setState({\n      WikiSearchTerms: e.target.value\n    });\n  }\n\n  render() {\n    console.log(this.state.wikiSearchReturnValues);\n    let wikiSearchResults = [];\n\n    for (var key3 in this.state.wikiSearchReturnValues) {\n      wikiSearchResults.push(\n        <div className='searchResultDiv' key={key3}>\n          <h3><a href={this.state.wikiSearchReturnValues[key3].queryResultPageFullURL}>{this.state.wikiSearchReturnValues[key3].queryResultPageTitle}</a></h3>\n          <span className=\"link\"><a href={this.state.wikiSearchReturnValues[key3].queryResultPageFullURL}>{this.state.wikiSearchReturnValues[key3].queryResultPageFullURL}</a></span>\n          <p className='description' dangerouslySetInnerHTML={{__html: this.state.wikiSearchReturnValues[key3].queryResultPageSnippet}}></p>\n        </div>\n      );\n    }\n\n    return(\n      <div className=\"App\">\n        <h1>Wikipedia Search Engine</h1>\n        <form action=\"\">\n          <input type=\"text\" value={this.state.WikiSearchTerms || ''} onChange={this.changeWikiSearchTerms} placeholder='Search Wikipedia Articles' />\n          <button type='submit' onClick={this.useWikiSearchEngine}>Search</button>\n        </form>\n        {wikiSearchResults}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}